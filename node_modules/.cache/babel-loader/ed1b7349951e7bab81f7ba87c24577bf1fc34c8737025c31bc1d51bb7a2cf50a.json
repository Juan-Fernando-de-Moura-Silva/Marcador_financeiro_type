{"ast":null,"code":"import _slicedToArray from \"/home/juan/\\xC1rea de Trabalho/React/react-typescript/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nexport var getCurrentMonth = function getCurrentMonth() {\n  var now = new Date();\n  return \"\".concat(now.getFullYear(), \"-\").concat(now.getMonth() + 1);\n};\nexport var filterListByMonth = function filterListByMonth(list, date) {\n  var newList = [];\n  var _date$split = date.split('-'),\n    _date$split2 = _slicedToArray(_date$split, 2),\n    year = _date$split2[0],\n    month = _date$split2[1];\n  for (var i in list) {\n    if (list[i].date.getFullYear() === parseInt(year) && list[i].date.getMonth() + 1 === parseInt(month)) {\n      newList.push(list[i]);\n    }\n  }\n  return newList;\n};\nexport var formatDate = function formatDate(date) {\n  var year = date.getFullYear();\n  var month = date.getMonth() + 1;\n  var day = date.getDate();\n  return \"\".concat(addZeroToDate(day), \"/\").concat(addZeroToDate(month), \"/\").concat(year);\n};\nvar addZeroToDate = function addZeroToDate(n) {\n  return n < 10 ? \"0\".concat(n) : \"\".concat(n);\n};\nexport var formatCurrentMonth = function formatCurrentMonth(currentMonth) {\n  var _currentMonth$split = currentMonth.split('-'),\n    _currentMonth$split2 = _slicedToArray(_currentMonth$split, 2),\n    year = _currentMonth$split2[0],\n    month = _currentMonth$split2[1];\n  var months = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];\n  return \"\".concat(months[parseInt(month) - 1], \" de \").concat(year);\n};\nexport var newDateAdjusted = function newDateAdjusted(dateField) {\n  var _dateField$split = dateField.split('-'),\n    _dateField$split2 = _slicedToArray(_dateField$split, 3),\n    year = _dateField$split2[0],\n    month = _dateField$split2[1],\n    day = _dateField$split2[2];\n  return new Date(parseInt(year), parseInt(month) - 1, parseInt(day));\n};","map":{"version":3,"names":["getCurrentMonth","now","Date","concat","getFullYear","getMonth","filterListByMonth","list","date","newList","_date$split","split","_date$split2","_slicedToArray","year","month","i","parseInt","push","formatDate","day","getDate","addZeroToDate","n","formatCurrentMonth","currentMonth","_currentMonth$split","_currentMonth$split2","months","newDateAdjusted","dateField","_dateField$split","_dateField$split2"],"sources":["/home/juan/Área de Trabalho/React/react-typescript/src/helpers/dateFilter.ts"],"sourcesContent":["import { Item } from '../types/Item';\n\nexport const getCurrentMonth = () => {\n    let now = new Date();\n    return `${now.getFullYear()}-${now.getMonth()+1}`;\n}\n\nexport const filterListByMonth = (list: Item[], date: string): Item[] => {\n    let newList: Item[] = [];\n    let [year, month] = date.split('-');\n\n    for(let i in list) {\n        if(\n            list[i].date.getFullYear() === parseInt(year) &&\n            (list[i].date.getMonth() + 1) === parseInt(month)\n        ) {\n            newList.push(list[i]);\n        }\n    }\n\n    return newList;\n}\n\nexport const formatDate = (date: Date): string => {\n    let year = date.getFullYear();\n    let month = date.getMonth() + 1;\n    let day = date.getDate();\n\n    return `${addZeroToDate(day)}/${addZeroToDate(month)}/${year}`;\n}\nconst addZeroToDate = (n: number): string => n < 10 ? `0${n}` : `${n}`;\n\nexport const formatCurrentMonth = (currentMonth: string): string => {\n    let [year, month] = currentMonth.split('-');\n    let months = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];\n    return `${months[parseInt(month) - 1]} de ${year}`;\n}\n\nexport const newDateAdjusted = (dateField: string) => {\n    let [year, month, day] = dateField.split('-')\n    return new Date(parseInt(year), parseInt(month) - 1, parseInt(day))\n  }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}